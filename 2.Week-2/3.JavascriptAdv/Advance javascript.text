
◼Here we are learn some advance concept of Javascript like oops , Asynchronous coding:--

Object-Oriented Programming (OOP) Concepts:-
Object-Oriented Programming (OOP) is a programming paradigm based on the concept of objects, which can contain data (fields or attributes) and code (methods). 
OOP helps in modeling real-world entities and their interactions. It is widely used in modern programming due to its emphasis on modular, reusable, and maintainable code.

The four fundamental concepts of OOP are:
    1.Encapsulation
    2.Abstraction
    3.Inheritance
    4.Polymorphism


1. Encapsulation-
Encapsulation refers to bundling the data (attributes) and methods (functions) that operate on the data into a single unit (an object). 
It helps in restricting direct access to some of an object's components, which is a means of preventing unintended interference and misuse.

Data hiding: By using access modifiers like private or protected, certain attributes can be hidden from outside access, 
while providing public methods (getters and setters) for controlled access.


2. Abstraction
Abstraction is the concept of hiding complex implementation details and showing only the essential features of an object. 
This helps in reducing complexity and allows the programmer to focus on interactions at a higher level without worrying about the internal details.

Example:
A Car class can have complex internal workings, but the user interacts with it through simple methods like start(), stop(), or accelerate(), 
without needing to know how these operations work internally.


3. Inheritance --
Inheritance allows a class (child or derived class) to inherit properties and methods from another class (parent or base class). It promotes 
code reuse and establishes a hierarchical relationship between classes.

Base Class (Parent): The class being inherited from.
Derived Class (Child): The class that inherits from the base class.


4. Polymorphism --
Polymorphism means "many forms" and allows objects to be treated as instances of their parent class rather than their actual class. 
The behavior can vary based on the object that is calling the method.

Method Overriding: A child class can provide a specific implementation of a method already defined in its parent class.
Method Overloading (not directly supported in JavaScript but possible through different approaches): Multiple functions with the same name 
but different parameters.


#Benefits of OOP:-
    Modularity: Code is organized into objects, which makes it easier to understand, modify, and maintain.
    Reusability: Inheritance allows code reuse and can reduce redundancy.
    Scalability: Objects can interact and extend without modifying existing code.
    Abstraction and Encapsulation: These concepts help manage complexity by reducing the exposure of internal details and controlling object interactions.
    In summary, OOP principles promote code organization, reusability, and modularity, making it easier to build and manage large, complex systems.


◼Asynchronous Programming in JavaScript:--
Asynchronous programming allows JavaScript to perform non-blocking operations, enabling the program to continue executing while waiting for tasks like I/O operations, API calls, timers, or any long-running tasks to complete. This is crucial because JavaScript is single-threaded, meaning only one task can be executed at a time. By using asynchronous techniques, JS can handle multiple tasks efficiently without freezing the entire program during blocking operations.

Key Concepts of Asynchronous Programming in JavaScript:
    Callbacks
    Promises
    Async/Await

1. Callbacks:-
   A callback function is a function passed as an argument to another function, which is executed later. 
It's a common way to handle asynchronous code in JavaScript.


2. Promises:-
 A Promise represents a value that may be available now, or in the future, or never. It has three states:

Pending: Initial state, neither fulfilled nor rejected.
Fulfilled: Operation completed successfully.
Rejected: Operation failed.
 
3. Async/Await:-
 Introduced in ES8 (ES2017), async/await is built on top of Promises and allows for writing asynchronous code 
in a synchronous-looking manner, improving readability and reducing callback nesting.


#Real-World Asynchronous Example: Fetching Data from an API:-

async function fetchUsers() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users'); // Fetch data from API
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        const users = await response.json(); // Parse JSON response
        console.log("Fetched users:", users);
    } catch (error) {
        console.error("Error fetching users:", error);
    }
}

fetchUsers();


Explanation:-
fetch() is a built-in function that returns a Promise.
await pauses the execution until the fetch call is completed.
Error handling with try/catch ensures any network errors are caught.

Summary of Asynchronous Techniques:-
1.Callbacks: Basic way to handle async code but can lead to "callback hell" (deeply nested callbacks).
2.Promises: More robust and cleaner alternative to callbacks, with methods like .then(), .catch(), and .finally().
3.Async/Await: Built on Promises, allowing you to write cleaner and more readable async code that looks synchronous.

Using these tools effectively allows JavaScript applications to handle complex asynchronous tasks like API calls, file handling, timers, 
and more without blocking other operations.

◼ES5 (ECMAScript 5):--
  Released in 2009, ES5 was a major revision to the JavaScript language. It introduced new features that focused on improving the language’s flexibility 
and compatibility, making it easier to work with large-scale web applications.

Key Features of ES5:-

Strict Mode:-
Allows you to write safer JavaScript by catching common coding errors and "unsafe" actions (e.g., assigning values to undeclared variables).
Activated using 'use strict'; at the top of a script or function.

Array Methods:-
Introduced methods like .forEach(), .map(), .filter(), .reduce(), .some(), and .every(), which allow more expressive ways to manipulate arrays.

const numbers = [1, 2, 3];
const doubled = numbers.map(num => num * 2); // [2, 4, 6]

Object Methods:-
New methods like Object.create(), Object.keys(), Object.defineProperty(), etc., for working with objects.

JSON:-
Introduced JSON.parse() and JSON.stringify() methods for easier handling of JSON data.

Accessors (Getters and Setters):-
ES5 introduced get and set for defining object properties dynamically.

const person = {
  firstName: "John",
  lastName: "Doe",
  get fullName() {
    return `${this.firstName} ${this.lastName}`;
  }
};
console.log(person.fullName); // "John Doe"

Function Binding with bind():-
Function.prototype.bind() allows you to create a new function with this bound to a specific value.


◼ES6 (ECMAScript 6 or ECMAScript 2015):-
  Released in 2015, ES6 (also known as ECMAScript 2015) brought significant changes and additions to JavaScript, 
making it a more modern and robust language. It is widely supported in modern browsers and commonly used in 
modern JavaScript development.

Key Features of ES6:-

Block-Scoped Variables (let and const):-
let: Allows you to declare variables with block scope.
const: Declares constants that cannot be reassigned.

let x = 10;
const y = 20;

Arrow Functions:-
A concise way to define functions using the => syntax. Arrow functions do not have their own this context.
const add = (a, b) => a + b;

Template Literals:-
Allows string interpolation using backticks (`) and placeholders (${expression}).

const name = "Alice";
console.log(`Hello, ${name}!`);

Default Parameters:-
Allows you to specify default values for function parameters.

function greet(name = "Guest") {
  return `Hello, ${name}!`;
}
console.log(greet()); // "Hello, Guest!"

Destructuring Assignment:-
Extract values from arrays or objects into variables easily.

const [a, b] = [1, 2];
const { name, age } = { name: "Alice", age: 25 };

Spread and Rest Operators (...):-
Spread: Spreads elements from an array or object.
Rest: Collects multiple elements into an array.

const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4, 5]; // [1, 2, 3, 4, 5]

function sum(...args) {
  return args.reduce((total, num) => total + num);
}

Classes:-
Introduced class syntax to create classes and use object-oriented programming more easily.

class Animal {
  constructor(name) {
    this.name = name;
  }
  speak() {
    console.log(`${this.name} makes a noise.`);
  }
}

Modules:-
Native support for modules using import and export.

// module.js
export const greet = name => `Hello, ${name}!`;

// main.js
import { greet } from './module.js';
console.log(greet('Alice'));

Promises:-
Introduced a cleaner way to work with asynchronous operations, avoiding "callback hell".

const promise = new Promise((resolve, reject) => {
  // Asynchronous operation here
});

for...of Loop:-
Iterates over iterable objects like arrays, strings, etc.

const numbers = [10, 20, 30];
for (const num of numbers) {
  console.log(num);
}

#Summary of ES5 vs ES6:---
ES5 focused on improving existing functionality, making JavaScript more robust, with new methods for objects and arrays.
ES6 introduced modern syntax improvements, classes, modules, block-scoped variables, template literals, and many other features that make JavaScript code more concise and easier to read and maintain.
ES6 and its subsequent versions are widely adopted by modern developers to write cleaner, modular, and scalable JavaScript code.