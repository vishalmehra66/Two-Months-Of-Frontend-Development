
◼-Basic Javascript concepts-◼

1. Introduction to JavaScript--
JavaScript is a versatile, high-level programming language primarily used for enhancing interactivity on websites. 
Unlike HTML and CSS, which structure and style webpages respectively, JavaScript adds dynamic behavior, 
making websites more engaging and user-friendly.

2. Variables--
Variables store data values that can be used and manipulated in your programs. Think of a variable as a "container" that holds information. 
In simple words Variable is the name of Memory location where we store data.
JavaScript provides three ways to declare variables:

var: The original way to declare variables (not commonly used today due to certain quirks).
let: Allows you to declare variables with block scope, providing better control and reducing potential bugs.
const: Used for declaring variables whose values cannot be changed once assigned.
Example:
let message = "Hello, world!";
const pi = 3.14159;

3. Data Types--
Datatype means the type of data which type of a variable contains. JavaScript has different types of data that you can work with:

String: Textual data, enclosed in single (') or double (") quotes. e.g., 'Hello', "JavaScript".
Number: Numeric values, e.g., 5, 3.14.
Boolean: Represents true or false.
Object: Complex data structures used to store collections of data and functions. e.g., {name: "Alice", age: 25}.
Array: Lists of values, e.g., [1, 2, 3].
Undefined: A variable without an assigned value.
Null: A special value that explicitly signifies "nothing" or "empty".

4. Operators--
Operators perform actions on values and variables. Here are some commonly used types:

Arithmetic Operators: Perform basic math. Examples: +, -, *, /, %.
Assignment Operators: Assign values to variables. Examples: =, +=, -=.
Comparison Operators: Compare values. Examples: ==, ===, !=, >, <.
Logical Operators: Combine conditions. Examples: && (AND), || (OR), ! (NOT).

Example:
let a = 10;
let b = 5;
let sum = a + b; // sum is 15

5. Conditional Statements--
Conditional statements enable your program to make decisions based on conditions. The main structures are:

if Statement: Executes code if a specified condition is true.
else Statement: Executes code if the condition is false.
else if Statement: Checks additional conditions if previous conditions were false.
switch Statement: A cleaner way to compare one value against multiple possibilities.

Example:
let temperature = 30;
if (temperature > 25) {
  console.log("It's hot outside!");
} else {
  console.log("It's cool outside.");
}

6. Loops--
Loops let you repeat code blocks as long as specified conditions are met. Common loop structures include:

for Loop: Runs a block of code a fixed number of times.
while Loop: Continues running as long as a specified condition is true.
do...while Loop: Similar to while but guarantees the block runs at least once.

Example:
for (let i = 1; i <= 5; i++) {
  console.log("Count:", i);
}

7. Functions--
Functions are reusable blocks of code designed to perform specific tasks. You define functions once and call them whenever needed.

Defining a Function:

function greet(name) {
  return `Hello, ${name}!`;
}
//Calling a Function
let message = greet("John"); // Output: "Hello, John!"
Functions can also accept parameters, process data, and return values, making your code modular and efficient.

8. Objects--
Objects are collections of key-value pairs, allowing you to store and manage related data. 
They are fundamental to working with complex data.

Example:
let person = {
  name: "Alice",
  age: 30,
  isStudent: false,
  greet: function() {
    return "Hi, I'm " + this.name;
  }
};
You can access properties using dot notation (e.g., person.name) or bracket notation (e.g., person["name"]).


-----------------------------------------------------------------
This overview covers the essential building blocks of JavaScript.